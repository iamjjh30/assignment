1.
(1)
select bookname
from book
where bookid = 1;

(2)
select bookname
from book
where price >= 20000;

(3) 
select sum(saleprice)
from orders
where custid = (select custid
from customer
where name = "박지성");

(4)
select count(*)
from orders
where custid = 1;

(5)
select count(distinct publisher) as "출판사 수"
from book
where bookid in (select bookid
from orders
where custid = (select custid
from customer
where name = "박지성"));

(6)
select bookname as 책이름, price as 가격, price - saleprice as "정가 차이"
from orders join book
on orders.bookid = book.bookid
where custid = (select custid
from customer
where name = "박지성");

(7)
select *
from book
where not exists(
	select bookname
    from orders
    where orders.bookid = book.bookid and orders.custid = 
		(select custid
	     from customer
	     where name = "박지성")
);

2.
(1) 
select count(*)
from book;

(2)
select count(distinct publisher)
from book;

(3)
select name, address
from customer;

(4) 
select bookid
from orders
where orderdate between date_format("2014-07-04","%Y-%m-%d") and date_format("2014-07-07","%Y-%m-%d");

(5)
select bookid
from orders
where orderdate not between date_format("2014-07-04","%Y-%m-%d") and date_format("2014-07-07","%Y-%m-%d");
            
(6) 
select name, address
from customer
where name like '김%';

(7)
select name, address
from customer
where name like '김%아';

(8)
select name
from customer
where not exists(
	select custid
    from orders
    where customer.custid = orders.custid    
);

(9) 
select sum(orders.saleprice) as "총액", round(avg(orders.saleprice)) as "평균 금액"
from orders;

(10) 
select customer.name, sum(orders.saleprice)
from orders join customer
on orders.custid = customer.custid
group by orders.custid;

(11)
select customer.name, book.bookname
from orders left join customer on orders.custid = customer.custid
			left join book 	   on orders.bookid = book.bookid;

(12) 
select *
from book join orders on book.bookid = orders.bookid
where price - saleprice like (
	select MAX(price - saleprice)
    from book join orders on book.bookid = orders.bookid
);

(13) 
select round(avg(saleprice))
from orders join customer
on orders.custid = customer.custid
group by orders.custid
having avg(saleprice) > (select avg(saleprice) from orders);

03.
(1)
select distinct name
from customer join orders
on customer.custid = orders.custid
where bookid in (select bookid
from book
where customer.name not like "박지성" and
publisher in (
		select publisher
		from orders join book
		on orders.bookid = book.bookid
        where orders.custid = (
			select custid
            from customer
            where name like "박지성"
        )
));

(2)
select name
from customer c1
where 2 >= (
	select count(distinct publisher)
	from orders join book on orders.bookid = book.bookid
				join customer on orders.custid = customer.custid
	where name like c1.name
	);

(3)
 select bookname
 from book b1
 where (
	select count(book.bookid)
    from book join orders
    on book.bookid = orders.bookid
    where book.bookid = b1.bookid
 ) >= 0.3 * (select count(*) from customer);
04.
(1)
insert into book(bookid, bookname, publisher, price) values('북 아이디가 필요하다.','스포츠 세계', '대한미디어', 10000);

(2)
delete from book
where publisher = "삼성당";

(3)
delete from book
where publisher = "이상미디어";

(4)
update book
set publisher = '대한출판사'
where publisher = '대한미디어';

(5)
create table Bookcompany(
	name varchar(20) primary key,
    address varchar(20),
    begin date
);

(6)
alter table bookcompany add webaddress varchar(30);

(7)
insert into bookcompany(name, address, begin, webaddress) values('한빛아카데미','서울시 마포구','1993-01-01','http://hanbit.co.kr');

05.
(1)
select *
from customer c1
where not exists(
	select *
    from orders c2
    where c1.custid = c2.custid
);

(2)
select *
from customer c1
where exists(
	select *
    from orders c2
    where c1.custid = c2.custid
);

6.
CREATE	DDL	
ALTER	DDL	
DROP	DDL	
SELECT	DML	
INSERT	DML	
DELETE	DML	
UPDATE	DML	
GRANT	DCL	
REVOKE	DCL

7.
(1)
SELECT *  
FROM R  
WHERE A = 'a2';

(2)
SELECT A, B  
FROM R;

(3)
SELECT *  
FROM R  
JOIN S  
ON R.C = S.C;

8.
(1)
a2	b1	c1	c1	d2	e1
a1	b1	c1	c1	d2	e1
a2	b1	c1	c1	d1	e2
a1	b1	c1	c1	d1	e2
a3	b1	c2	c2	d3	e3

(2)
a1	b1	c1	c1	d1	e2
a1	b1	c1	c1	d2	e1
a2	b1	c1	c1	d1	e2
a2	b1	c1	c1	d2	e1
a3	b1	c2	c2	d3	e3
a4	b2	c4			

(3)
a2	b1	c1	c1	d2	e1
a1	b1	c1	c1	d2	e1
a2	b1	c1	c1	d1	e2
a1	b1	c1	c1	d1	e2
a3	b1	c2	c2	d3	e3
			c5	d3	e3

(4)
FULL OUTER JOIN을 지원하지 않아 오류.

(5)
a4	b2	c4	c1	d2	e1
a3	b1	c2	c1	d2	e1
a2	b1	c1	c1	d2	e1
a1	b1	c1	c1	d2	e1
a4	b2	c4	c1	d1	e2
a3	b1	c2	c1	d1	e2
a2	b1	c1	c1	d1	e2
a1	b1	c1	c1	d1	e2
a4	b2	c4	c2	d3	e3
a3	b1	c2	c2	d3	e3
a2	b1	c1	c2	d3	e3
a1	b1	c1	c2	d3	e3
a4	b2	c4	c5	d3	e3
a3	b1	c2	c5	d3	e3
a2	b1	c1	c5	d3	e3
a1	b1	c1	c5	d3	e3

9.
SUM(col2)
10

10.
a
1
2
3
4
5
6
7
8

11.
a  b
2  2
