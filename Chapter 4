1.

ABS(-15) → 15

CEIL(15.7) → 16

COS(3.14159) → -1 (π의 코사인 근사값)

FLOOR(15.7) → 15

LOG(10, 100) → 2 (10을 밑으로 하는 log(100))

MOD(11, 4) → 3

POWER(3, 2) → 9

ROUND(15.7) → 16

SIGN(-15) → -1

TRUNCATE(15.7, 0) → 15

CHAR(67 USING utf8) → 'C'

CONCAT('HAPPY', 'Birthday') → 'HAPPYBirthday'

LOWER('Birthday') → 'birthday'

LPAD('Page 1', 15, '*') → **'*******Page 1'

REPLACE('JACK', 'J', 'BL') → 'BLACK'

RPAD('Page 1', 15, '*') → 'Page 1*******'**

SUBSTR('ABCDEFG', 3, 4) → 'CDEF'

TRIM(LEADING 0 FROM '00AA00') → 'AA00'

UPPER('Birthday') → 'BIRTHDAY'

ASCII('A') → 65

LENGTH('Birthday') → 8

ADDDATE('2024-02-14', INTERVAL 10 DAY) → '2024-02-24'

LAST_DAY(SYSDATE()) → (현재 달의 마지막 날, 예: 2025-06-30)

NOW() → (현재 날짜와 시간, 예: 2025-06-17 12:34:56)

DATE_FORMAT(SYSDATE(), '%Y') → '2025'

CONCAT(123) → '123' (숫자를 문자열로 변환)

STR_TO_DATE('12 05 2024', '%d %m %Y') → '2024-05-12'

CAST('12.3' AS DECIMAL(3,1)) → 12.3

IF(1=1, 'aa', 'bb') → 'aa'

IFNULL(123, 345) → 123

IFNULL(NULL, 123) → 123

2.

(1)
SELECT * FROM Mybook;
bookid	price
1		10000
2		20000
3		NULL

(2)
SELECT bookid, IFNULL(price, 0) FROM Mybook;
bookid	IFNULL(price, 0)
1		10000
2		20000
3		0

(3)
SELECT * FROM Mybook WHERE price IS NULL;
bookid	price
3		NULL

(4)
SELECT * FROM Mybook WHERE price = '';
결과 없음.

(5)
SELECT bookid, price+100 FROM Mybook;
bookid	price+100
1		10100
2		20100
3		NULL

(6)
SELECT SUM(price), AVG(price), COUNT(*) FROM Mybook WHERE bookid >= 4;
결과 없음.

(7)
SELECT COUNT(*), COUNT(price) FROM Mybook;
COUNT(*)	COUNT(price)
3		2

(8)
SELECT SUM(price), AVG(price) FROM Mybook;
SUM(price)	AVG(price)
30000	15000

NULL은 값이 없다는 의미이지, 0이나 빈 문자열이 아님.

NULL은 = 연산으로 비교할 수 없으며, IS NULL, IS NOT NULL로 비교해야 한다.

연산에 NULL이 포함되면 결과는 NULL이다.

3.
(1)
SELECT COUNT(A) FROM R;
count(a)
2

(2)
SELECT * FROM R WHERE A IN(12, 10, NULL);
a	b
12 	null
10	12

(3)
SELECT A, COUNT(*) FROM R GROUP BY A;
a	count(*)
null	2
12	1
10	1

4.

(1)
SELECT bookid, bookname, price FROM Book;
1	축구의 역사	7000
2	축구 아는 여자	13000
3	축구의 이해	22000
4	골프 바이블	35000
5	피겨 교본	8000
6	배구 단계별기술	6000
7	야구의 추억	20000
8	야구를 부탁해	13000
9	올림픽 이야기	7500
10	Olympic Champions	13000
15	스포츠 즐거움	20000

(2)
SELECT bookid, bookname, price FROM Book LIMIT 5;
1	축구의 역사	7000
2	축구 아는 여자	13000
3	축구의 이해	22000
4	골프 바이블	35000
5	피겨 교본	8000
		
(3)
SELECT bookid, bookname, price FROM Book ORDER BY price;
6	배구 단계별기술	6000
1	축구의 역사	7000
9	올림픽 이야기	7500
5	피겨 교본	8000
2	축구 아는 여자	13000
8	야구를 부탁해	13000
10	Olympic Champions	13000
7	야구의 추억	20000
15	스포츠 즐거움	20000
3	축구의 이해	22000
4	골프 바이블	35000

(4)
SET @RNUM:=0;
SELECT bookid, bookname, price, @RNUM + 1 AS ROWNUM FROM Book;
1	축구의 역사	7000	1
2	축구 아는 여자	13000	1
3	축구의 이해	22000	1
4	골프 바이블	35000	1
5	피겨 교본	8000	1
6	배구 단계별기술	6000	1
7	야구의 추억	20000	1
8	야구를 부탁해	13000	1
9	올림픽 이야기	7500	1
10	Olympic Champions	13000	1
15	스포츠 즐거움	20000	1

(5)
SELECT bookid, bookname, price, @RNUM:= @RNUM +1 AS ROWNUM FROM Book, (SELECT @RNUM:= 0) R WHERE @RNUM < 5 ;
1	축구의 역사	7000	1
2	축구 아는 여자	13000	2
3	축구의 이해	22000	3
4	골프 바이블	35000	4
5	피겨 교본	8000	5

(6)
SELECT bookid, bookname, price, @RNUM:= @RNUM +1 AS ROWNUM FROM (SELECT * FROM Book ORDER BY price) b, (SELECT @RNUM:=0) R WHERE @RNUM < 5;
6	배구 단계별기술	6000	1
1	축구의 역사	7000	2
9	올림픽 이야기	7500	3
5	피겨 교본	8000	4
2	축구 아는 여자	13000	5

(7)
SELECT bookid, bookname, price, @RNUM:= @RNUM + 1 AS ROWNUM FROM (SELECT * FROM Book ORDER BY price) b, (SELECT @RNUM:= 0) R WHERE @RNUM < 5 LIMIT 5;
6	배구 단계별기술	6000	1
1	축구의 역사	7000	2
9	올림픽 이야기	7500	3
5	피겨 교본	8000	4
2	축구 아는 여자	13000	5

5.
(1)
SELECT custid, (SELECT address
				FROM Customer cs
				WHERE cs.custid = od.custid) 'address'
				SUM(saleprice) 'total'custidnamecustidphone
FROM Orders od
GROUP BY od.custid;
-> 고객별로 총 구매 금액과 그 고객의 주소를 알고 싶다

(2)
SELECT cs,name,s
FROM (SELECT custid, AVG(saleprice) s
	  FROM Orders
      GROUP BY custid) od, Customer cs
WHERE cs.custid = od.custid;
-> 각 고객의 이름과 해당 고객의 평균 구매 금액을 알고 싶다

(3)
SELECT SUM(saleprice) 'total'
FROM Orders od
WHERE EXISTS (SELECT *
			  FROM Customer cs
			  WHERE custid <= 3 AND cs.custid = od.custid);
-> custid가 3 이하인 고객이 한 주문들의 총 판매 금액은 얼마인가?

6. 2

7. 
SELECT name
FROM Customer
WHERE address LIKE '대한민국%'
  AND custid NOT IN (SELECT custid FROM Orders);

SELECT name
FROM Customer c
WHERE address LIKE '대한민국%'
  AND NOT EXISTS (
    SELECT 1
    FROM Orders o
    WHERE o.custid = c.custid
  );

SELECT c.name
FROM Customer c
LEFT JOIN Orders o ON c.custid = o.custid
WHERE c.address LIKE '대한민국%'
  AND o.custid IS NULL;

8.
회원번호	등급
1		1
2		2

9. 2-3-4-5-1-6

10.
1. 보안성 향상
2. 복잡한 쿼리의 단순화
3. 논리적 독립성 제공

11.
합계
5000

12.
(1)
CREATE VIEW highorders AS
SELECT 
    b.bookid, 
    b.bookname, 
    c.name AS customer_name, 
    b.publisher, 
    o.saleprice
FROM 
    Book b
    JOIN Orders o ON b.bookid = o.bookid
    JOIN Customer c ON o.custid = c.custid
WHERE 
    o.saleprice >= 20000;

(2)
SELECT 
    bookname, 
    customer_name
FROM 
    highorders;

(3)
CREATE OR REPLACE VIEW highorders AS
SELECT 
    b.bookid, 
    b.bookname, 
    c.name AS customer_name, 
    b.publisher
FROM 
    Book b
    JOIN Orders o ON b.bookid = o.bookid
    JOIN Customer c ON o.custid = c.custid
WHERE 
    o.saleprice >= 20000;

SELECT 
    bookname, 
    customer_name
FROM 
    highorders;
